# Uploads a toolchain release's binary size metrics to DataDog.
name: Release - Binary Sizes

# TODO(kendal): How do we trigger this on previous releases?
# TODO(kendal): Add a shortcut for testing (use stub toolchain version, debug metrics tag, etc..).
# TODO(kendal): Handle debug symbols for the toolchain.
on:
  pull_request:

  # TODO(kendal): Uncomment
  # release: [created, edited]

env:
  CACHE_PATH: cache/bin
  BLOATY_CACHE_KEY: bloaty

jobs:
  # TODO(kendal): Convert this to a reusable workflow.
  # TODO(kendal): Pin the bloaty version.
  build_bloaty:
    name: Build Bloaty
    runs-on: windows-latest

    env:
      SOURCE_PATH: ${{ github.workspace }}/SourceCache/bloaty
      BUILD_PATH: ${{ github.workspace }}/BuildCache/bloaty

    steps:
      - name: Cache Bloaty
        id: cache
        uses: actions/cache@v4
        with:
          path: ${{ env.CACHE_PATH }}
          key: ${{ env.BLOATY_CACHE_KEY }}

      - name: Checkout Bloaty
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          repository: google/bloaty
          ref: refs/heads/main
          path: ${{ env.SOURCE_PATH }}
          show-progress: false

      # This step installs Ninja.
      - name: Setup VS dev environ
        if: steps.cache.outputs.cache-hit != 'true'
        uses: compnerd/gha-setup-vsdevenv@main
        with:
          host_arch: amd64
          components: 'Microsoft.VisualStudio.Component.VC.Tools.x86.x64'
          arch: amd64

      - name: Configure Bloaty
        if: steps.cache.outputs.cache-hit != 'true'
        run: cmake -B ${{ env.BUILD_PATH }} -S ${{ env.SOURCE_PATH }} -G Ninja

      - name: Build Bloaty
        if: steps.cache.outputs.cache-hit != 'true'
        run: cmake --build ${{ env.BUILD_PATH }}

      - name: Add Bloaty to Cache
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          New-Item -Path ${{ env.CACHE_PATH }} -ItemType Directory -Force | Out-Null
          Copy-Item ${{ env.BUILD_PATH }}/bloaty.exe -Destination ${{ env.CACHE_PATH }}

  binary_sizes:
    needs: [build_bloaty]
    runs-on: windows-latest
    env:
      BLOATY_OPTIONS_FILE: ${{ github.workspace }}/bloaty.textproto

    strategy:
      matrix:
        # TODO(kendal): Support arm64
        toolchain_arch: [amd64]

    steps:
      - name: Download Bloaty
        uses: actions/cache/restore@v3
        with:
          path: ${{ env.CACHE_PATH }}
          key: ${{ env.BLOATY_CACHE_KEY }}

      - name: Install Bloaty
        run: echo ${{ env.CACHE_PATH }} | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Install Swift toolchain
        uses: compnerd/gha-setup-swift@main
        with:
          github-repo: thebrowsercompany/swift-build
          github-token: ${{ secrets.GITHUB_TOKEN }}
          release-asset-name: installer-${{ matrix.toolchain_arch }}.exe
          release-tag-name: '20240412.2' # TODO(kjharland): Use GITHUB_REF

      # For the options file schema, see https://github.com/google/bloaty/blob/main/src/bloaty.proto.
      - name: Generate bloaty.textproto
        run: |
          New-Item -Path ${{ env.BLOATY_OPTIONS_FILE }}

          # Locate the toolchain installation <root> by walking up from
          # '<root>/Toolchains/<toolchain-version>/usr/bin/swift.exe'.
          $SwiftPath=$(Get-Command swift).Source
          $SwiftInstallRoot=${SwiftPath} | Split-Path | Split-Path | Split-Path | Split-Path | Split-Path

          # Generate the list of input files.
          Get-ChildItem -Recurse -Path ${SwiftInstallRoot} -Include "*.dll","*.exe" -Name | `
            %{ echo "filename: `"$_`"" } | `
            %{ $_ -replace '\\','/' } | `
            Out-File ${{ env.BLOATY_OPTIONS_FILE }} -Append

          # Sort by file size for consistent output.
          echo "sort_by: SORTBY_FILESIZE" | Out-File ${{ env.BLOATY_OPTIONS_FILE }} -Append

          # Print the file for debugging.
          Get-Content -Path ${{ env.BLOATY_OPTIONS_FILE }}

      - name: Run bloaty
        # google/bloaty/issues/375: Bloaty accepts -n 0 but not max_rows_per_level: 0 in its config.
        run: bloaty -c ${{ env.BLOATY_OPTIONS_FILE }} -n 0 --csv
